set ratios 1:2:3
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
# set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

##
# Functions
##

# Create New File
cmd touch %touch $1 && lf -remote "send $id select $1"

# Preview Panel Toggle
cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

# Mount Nextcloud WebDav
# cmd nextcloud ${{
# 	mntdir="/home/thejayduck/Nextcloud"
# 	server="https://nextcloud.ardarmutcu.com/remote.php/dav/files/ncp"
	
# 	mkdir -p "$mntdir"
# 	sudo mount -t davfs "$server" "$mntdir"
# 	lf -remote "send $id cd $mntdir"
# }}

cmd nextcloud ${{
	sudo systemctl start home-thejayduck-Nextcloud.mount
}}

# Trash
cmd move_to_trash ${{
	count=$(echo "$fx" | wc -l)
	echo -e "$fx"
	echo -e "\033[0;32mMove $count item(s) to trash?\033[0m (y/N)"
	
	read -r ans

	if [ "$ans" = "y" ]; then
		files=$(printf "$fx" | tr '\n' ';')
	 		while [ "$files" ]; do
				file=${files%%;*}
				trash-put "$(basename "$file")"
				
				if [ "$files" = "$file" ]; then
					files=''
				else
	      			files="${files#*;}"
	    		fi
			done
			echo -e "\033[0;32mMoved $count item(s) to trash\033[0m"
	else
		echo "\033[0;31mOperation canceled\033[0m"
	fi
}}

cmd empty_trash ${{
	files=$(trash-list)
	count=$(trash-list | wc -l)
	
	echo -e "$files"
	echo -e "\033[0;32mTotal: $count item(s)\033[0m"
	echo -e "Empty Trash? (y/N)"

	read -r ans

	if [ "$ans" = "y" ]; then
		trash-empty -f
		echo "\033[0;32mDeleted $count item(s) successfully\033[0m"
	else
		echo "\033[0;31mOperation canceled\033[0m"
	fi
}}

cmd toggle_trash ${{
	trash_dir="/home/thejayduck/.local/share/Trash/files"

	if [ "$PWD" != "$trash_dir" ]; then
		lf -remote "send $id cd $trash_dir"
	else
		lf -remote "send $id cd $OLDPWD"
	fi
}}

##
# Custom Config
##

set drawbox
set icons true
set sortby name
set dirfirst true
set info size
set cursorpreviewfmt "\033[4m"

##
# Mapping
##

# map " mark-load

map <c-x> cut
map <c-c> copy
map <c-v> paste
map c clear
map z unselect

# Trash
map <delete> move_to_trash
map t toggle_trash
map <c-t> empty_trash

# Other
map <c-e> extract
map d push :cd<space>
map g search

map <lt> set hidden!
map <tab> toggle_preview
map ss :set sortby size
map sd :set sortby name

map +x chmod +x
map +w chmod +w
map +r chmod +r
map -x chmod -x
map -w chmod -w
map -r chmod -r!/bin/sh

